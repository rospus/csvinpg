#!/bin/bash

################################################################################
# PROCEDURE FOR IMPORTING TXT STREAM OF LETTERS FROM EXTERNAL SFTP SERVER TO DB
################################################################################
# Author: Alessandro Fanna <alex@rospus.org>
# Version: 0.5.1
# Date: 26/12/2013
# License: GNU General Public License (GPL) version 3
# DeScription: added $USER_HOME explicitly for script execution as a cron job.
# 
# WARNING: logging info contained in external file "./import.conf".
#
# CHANGELOG:
# v0.5 (25/05/2013) Added encoding change to UTF-8 to purge invalid chars.
# v0.4 (21/05/2013) Added logfile info recording.
# v0.3 (20/05/2013) Checked against text anomalies in external files.
################################################################################

#SFTP login info for mirroring with lftp.
HOST=hostname
REMOTE=/remote_dir
USER=username
PASS=password

## Getting USER_HOME from system. Doesn't work if script is launched as CRON job.
# USER_HOME=$(getent passwd "$USER" | cut -d: -f6)
USER_HOME=/home/user

# Folders setup for the different stages. Could be automated with "mkdir -p".
MIRROR=$USER_HOME/csvpg/mirror # Trailing slash should never be used with LFTP.
IMPORTED=$USER_HOME/csvpg/imported
TEMP=$USER_HOME/csvpg/temp
LOG=$USER_HOME/csvpg/log

# Setting DB name. System user is already set as pgsql user, in order to avoid
# sending clear passwords.
DB_NAME=db_username

################################################################################
# STEP 1 - Mirror remote SFTP directory to $MIRROR without deleting remote 
# files. Lftp log file is in /home/.lftp/transfer_log
################################################################################

# Logging when SFTP mirroring starts.
echo "$(date "+%Y-%m-%d %T") $HOST Download inizio $REMOTE/" >> $LOG/mirror.log 2>&1

# Terminal info just for checking.
# echo "Downloading files via SFTP from $USER@$HOST..."

# SFTP login and mirroring directories. Optionally lftp could be set to erase downloaded files
lftp -u ${USER},${PASS} sftp://${HOST} <<MIRRORING
mirror $REMOTE $MIRROR
bye
MIRRORING

# Logging when mirroring finished. Details available in lftp transfer_log.
echo "$(date "+%Y-%m-%d %T") $HOST Download fine dettagli $USER_HOME.lftp/transfer_log" >> $LOG/mirror.log 2>&1

################################################################################
# STEP 2 - Find and manage in $MIRROR new files coming from remote SFTP  
# connection: place a modified copy in $TEMP (adding timestamp and some
# substrings plus a little text cleaning).
################################################################################

cd $MIRROR
list_mirror=$(find . -type f)

# For each file in $MIRROR that is not found in $IMPORTED the following is done:
# - adding file's modification timestamp at every line ($MODDATE);
# - adding $GROUP and $CUSTOMER info extracted from first line ($BARCODE);
# - adding batch info extracting it from each line of text<;
# - removing spaces after and before delimiters ";" and stripping out quotes ".
# - saving parsed file in $TEMP.
# Info contained in $MODDATE, $GROUP and $CUSTOMER are chained together with
# in order to pass them once as they don't change for the single file.
# Batch info are extracted from each line because it may not be distinct in the
# same file (each file may contain different batch codes).
for file in $list_mirror; do
   if [ ! -f "$IMPORTED/$file" ]; then

	# Getting $file's number of lines. Good for comparing after parsing.
	lines_in=$(wc -l < $file)

	# Logging when $file parsing starts, with its number of lines.
	echo "$(date "+%Y-%m-%d %T") ${file:2} Parsing inizio da $MIRROR righe $lines_in" >> $LOG/mirror.log 2>&1

	# Get file's last modification timestamp.
	MODDATE=$(stat -c %y $file)

	# Format timestamp in order to keep only dates.
	#MODDATE=${MODDATE%% *}
	
	# Read first line of file in order to excerpt the values from it that
	# don't change for the whole file (first 22 chars contains the barcode).
	# Example: TN309638006914400001;20;OD; COMPANY NAME; ADDRESS;ZIP_CODE;CITY
	BARCODE=$(sed -n 1p $file)

	## Another way to get the first line...
	# BARCODE=$(read -r line < $file)

	# Setting variables parsing $BARCODE using bash substring commands.
	GROUP=$(echo ${BARCODE:0:3})
	CUSTOMER=$(echo ${BARCODE:3:5})
	# Commenting out this line because BATCH info may not be distinct in the
	# same file.
	# BATCH=$(echo ${BARCODE:8:8})
	
	## Setting variables parsing $BARCODE using sed commands.
	# GROUP=$(echo $BARCODE|sed 's/^.\{0\}\(.\{3\}\).*/\1/')
	# CUSTOMER=$(echo $BARCODE|sed 's/^.\{3\}\(.\{5\}\).*/\1/')
	# BATCH=$(echo $BARCODE|sed 's/^.\{8\}\(.\{8\}\).*/\1/')
	# STRING=$MODDATE";"$GROUP";"$CUSTOMER";"$BATCH


	# Create variable $STRING that contains the 3 fields that will be added
	# to each line with ";" delimiters.
	STRING=$MODDATE";"$GROUP";"$CUSTOMER

	#echo $STRING
	#sleep 1

	# Inserting timestamp, group and customer contained in $STRING. Adding
	# the 8 chars after char 8 (counting from 0) that contains batch's info
	# with ";" delimiters. Removing spaces after and before ";" delimiters
	# and stripping double quotes (") and multiple spaces.
	# Parsed file is piped to iconv for encoding change to UTF-8 in order to
	# purge invalid chars. Output is then placed in $TEMP without removing
	# the original file.
	sed -e 's/; /;/g;s/ ;/;/g;s/"//g;s/  */\ /g;s/^.\{8\}\(.\{8\}\).*/'"$STRING"';\1;&/' $file | iconv -f WINDOWS-1252 -t UTF-8 -o $TEMP/$file
	
	## Attempt to write a more efficient string for space filtering.
	#sed -e 's/\s\+;\s\+/;/g;s/"//g;s/^.\{8\}\(.\{8\}\).*/'"$STRING"';\1;&/' $file > $TEMP/$file

	## Convert DOS newlines (CR/LF) to Unix format, remove spaces after
	## delimiters ";" and add timestamp at beginning of line.
	#awk -v MOD_DATE=$MODDATE '{sub(/\r$/,"")};{gsub(/; /,";")};{print MOD_DATE$0}' $file > $TEMP/$file

	# Getting the number of lines of the file parsed for comparing purposes.
	lines_temp=$(wc -l < $TEMP/$file)

	# Comparing if the parsed file contains the same number of lines of the
	# original file and logging result accordingly.
	if [ $lines_temp=$lines_in ]; then
		echo "$(date "+%Y-%m-%d %T") ${file:2} Parsing fine in $TEMP righe $lines_in" >> $LOG/mirror.log 2>&1
	else
		echo "$(date "+%Y-%m-%d %T") ${file:2} ERROR Parsing fine in $TEMP terminato con righe $lines_temp/$lines_in" >> $LOG/error_log 2>&1
		echo "$(date "+%Y-%m-%d %T") ${file:2} ERROR Parsing fine in $TEMP terminato con righe $lines_temp/$lines_in" >> $LOG/mirror.log 2>&1
	fi

	# Option to copy files 'as they are' instead of inserting timestamp and
	# removing spaces.
	#cp -p --parents $file $TEMP
      continue
   fi
done

################################################################################
# STEP 3 - Using \copy function of psql to import CSV files from $TEMP directory
# to postgres database and after importing moving files to $IMPORTED.
################################################################################

cd $TEMP
list_temp=$(find . -type f)

# Each CSV file in directory $TEMP will be imported in database.
for file_temp in $list_temp; do

	# Getting $file's number of lines. Good for comparing after import.	
	lines_csv=$(wc -l < $file_temp)

	echo "---------------------------"
	echo "Importing $file_temp with num. lines: $lines_csv"

	# Getting the number of records of the final table before importing.
	# Useful for checking how many records were imported and if the number
	# is the same as the file's lines $lines_csv.
	COUNT_BEFORE=$(psql -t -d $DB_NAME -c "select count (*) from table_name" | sed -e 's/^ *//g')

	# Terminal message just for testing purposes.
	echo "Importing $lines_csv records in $file_temp in table containing $COUNT_BEFORE records"
	
	# Logging when CSV importing in pgsql starts and how many records should
	# be created ($lines_csv).
	echo "$(date "+%Y-%m-%d %T") ${file_temp:2} Import START $TEMP with lines $lines_csv" >> $LOG/mirror.log 2>&1
	
# The following SQL commands thrown via psql creates a temporary table for CSV
# files import. An INSERT is made to final table (indexed) but only if barcode
# is not already in the table. This way is possible to accomplish other commands
# during data transfer: psql only imports to a table that has the same csv fields.
# When barcode is already present, import will be skipped for that record.
# Adding to psql option -L $LOG/mirror.log will append all importing session info.

psql -a -d $DB_NAME <<COPYIMPORT
CREATE TEMPORARY TABLE temp_table (LIKE master_table);
\copy temp_table FROM $file_temp WITH (FORMAT CSV, DELIMITER ';');
INSERT INTO flows_imported(
date_flow,
code_group,
code_customer,
code_lot,
barcode,
weight_envelope,
type_envelope,
addressee,
address,
zipcode,
city
)
SELECT DISTINCT 
date_flow,
code_group,
code_customer,
code_lot,
barcode,
weight_envelope,
type_envelope,
addressee,
address,
zipcode,
city
FROM temp_table
WHERE NOT EXISTS ( SELECT 1
	FROM flows_imported
	WHERE temp_table.barcode = flows_imported.barcode );
DROP TABLE temp_table;
COPYIMPORT

   #while read input; do
	## Log of all the text lines to be imported, just for testing reasons
	## (to be replaced with COPY routine in PGSQL).
   #	echo $input >> $LOG/LOGFILE
   #done < $TEMP/$file_temp

	# Getting the number of records of the final table in order to check
	# how many records were imported.
	COUNT_AFTER=$(psql -t -d $DB_NAME -c "select count (*) from flows_imported" | sed -e 's/^ *//g')

	# Difference between table records number before and after import.
	DIFF_COUNT=$(($COUNT_AFTER - $COUNT_BEFORE))

	# Echoing just for debugging.
	echo "Records gap -> $DIFF_COUNT"

	# Checking if the number of records imported equals the number of lines
	# of CSV file.
	# DIfferent numbers may indicate that some CSV barcodes were already
	# present in DB's table. That's why it's an ALERT and not an ERROR by
	# default. Logging 'end importing' and results accordingly.
	if [ $DIFF_COUNT = $lines_csv ]; then
		echo "$(date "+%Y-%m-%d %T") ${file_temp:2} Import END $TEMP record $DIFF_COUNT" >> $LOG/mirror.log 2>&1
	else
		echo "$(date "+%Y-%m-%d %T") ${file_temp:2} ALERT Import END $TEMP records $DIFF_COUNT/$lines_csv" >> $LOG/error_log 2>&1
		echo "$(date "+%Y-%m-%d %T") ${file_temp:2} ALERT Import END $TEMP records $DIFF_COUNT/$lines_csv" >> $LOG/mirror.log 2>&1
	fi

	# Moving imported CSV file in $IMPORTED.
	mv $file_temp $IMPORTED

	# Logging when CSV imported was moved from $TEMP to $IMPORTED.
	echo "$(date "+%Y-%m-%d %T") ${file_temp:2} Moving in $IMPORTED" >> $LOG/mirror.log 2>&1

done
